# i960 / 80960


define endian=little;

define alignment=4;

define space ram type=ram_space size=4 default;

define space register type=register_space size=4;


define register offset=0 size=4 [ pfp sp rip r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 g0 g1 g2 g3 g4 g5 g6 g7 g8 g9 g10 g11 g12 g13 g14 fp ];


define register offset=0x100 size=4 [ sf0 sf1 sf2 sf3 sf4 sf5 sf6 sf7 sf8 sf9 sf10 sf11 sf12 sf13 sf14 sf15 sf16 sf17 sf18 sf19 sf20 sf21 sf22 sf23 sf24 sf25 sf26 sf27 sf28 sf29 sf30 sf31 ];


define register offset=0x200 size=4 [ pc ac ip tc ];


define register offset=0x300 size=4 [ fp0 fp1 fp2 fp3 ];



define token instr (32)
  op2431=(24,31)
  reg1923=(19,23)
  reg1923l=(19,23)
  reg1923tq=(19,23)
  sfr1923=(19,23)
  sfr1923l=(19,23)
  sfr1923tq=(19,23)
  fp1923=(19,23)
  op1923=(19,23)
  reg1418=(14,18)
  reg1418l=(14,18)
  reg1418tq=(14,18)
  sfr1418=(14,18)
  sfr1418l=(14,18)
  sfr1418tq=(14,18)
  fp1418=(14,18)
  op1418=(14,18)
  m2=(13,13)
  m1=(12,12)
  m0=(11,11)
  op0710=(7,10)
  s1=(6,6)
  s0=(5,5)
  reg0004=(0,4)
  reg0004l=(0,4)
  reg0004tq=(0,4)
  sfr0004=(0,4)
  sfr0004l=(0,4)
  sfr0004tq=(0,4)
  fp0004=(0,4)
  op0004=(0,4)
  disp0212=(2,12)
  t=(1,1)
  s2=(0,0)
  disp0223=(2,23)
  op0000=(0,0)
  mode1213=(12,13)
  mode1011=(10,11)
  offset0011=(0,11)
  scale=(7,9)
  op0506=(5,6)
;


define token instr2 (32)
  disp0031=(0,31)
;



attach variables [ reg0004 reg1418 reg1923 ]
                 [ pfp sp rip r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 g0 g1 g2 g3 g4 g5 g6 g7 g8 g9 g10 g11 g12 g13 g14 fp ];

attach variables [ reg0004l reg1418l reg1923l ]
                 [ pfp _ rip _ r4 _ r6 _ r8 _ r10 _ r12 _ r14 _ g0 _ g2 _ g4 _ g6 _ g8 _ g10 _ g12 _ g14 _ ];

attach variables [ reg0004tq reg1418tq reg1923tq ]
                 [ pfp _ _ _ r4 _ _ _ r8 _ _ _ r12 _ _ _ g0 _ _ _ g4 _ _ _ g8 _ _ _ g12 _ _ _];


attach variables [ sfr0004 sfr1418 sfr1923 ]
                 [ sf0 sf1 sf2 sf3 sf4 sf5 sf6 sf7 sf8 sf9 sf10 sf11 sf12 sf13 sf14 sf15 sf16 sf17 sf18 sf19 sf20 sf21 sf22 sf23 sf24 sf25 sf26 sf27 sf28 sf29 sf30 sf31 ];

attach variables [ sfr0004l sfr1418l sfr1923l ]
                 [ sf0 _ sf2 _ sf4 _ sf6 _ sf8 _ sf10 _ sf12 _ sf14 _ sf16 _ sf18 _ sf20 _ sf22 _ sf24 _ sf26 _ sf28 _ sf30 _ ];

attach variables [ sfr0004tq sfr1418tq sfr1923tq ]
                 [ sf0 _ _ _ sf4 _ _ _ sf8 _ _ _ sf12 _ _ _ sf16 _ _ _ sf20 _ _ _ sf24 _ _ _ sf28 _ _ _ ];








efa1: offset0011 is offset0011 & mode1213=0 { export *[ram]:1 offset0011; }
efa1: offset0011 (reg1418) is offset0011 & reg1418 & mode1213=2 { local tmp:4 = reg1418 + offset0011; export *[ram]:1 tmp; }
efa1: (reg1418) is reg1418 & mode1213=1 & mode1011=0 & op0506=0 { local tmp:4 = reg1418; export *[ram]:1 tmp; }
efa1: reloc (ip) is ip & mode1213=1 & mode1011=1 & op0506=0 ; disp0031 [ reloc = disp0031 + 8; ] { local tmp:4 = reloc + inst_start; export *[ram]:1 tmp; }
efa1: (reg1418) [reg0004 * scale] is scale & reg0004 & reg1418  & mode1213=1 & mode1011=3 & op0506=0 { local tmp:4 = (scale * reg0004) + reg1418; export *[ram]:1 tmp; }
efa1: disp0031 is mode1213=3 & mode1011=0 & op0506=0 ; disp0031 { local tmp:4 = disp0031; export *[ram]:1 tmp; }
efa1: disp0031 (reg1418) is reg1418 & mode1213=3 & mode1011=1 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418; export *[ram]:1 tmp; }
efa1: disp0031 [reg0004 * scale] is reg0004 & scale & mode1213=3 & mode1011=2 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + (reg0004 * scale); export *[ram]:1 tmp; }
efa1: disp0031 (reg1418) [reg0004 * scale] is reg1418 & reg0004 & scale & mode1213=3 & mode1011=3 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418 + (reg0004 * scale); export *[ram]:1 tmp; }


efa12: offset0011 is offset0011 & mode1213=0 { export *[ram]:12 offset0011; }
efa12: offset0011 (reg1418) is offset0011 & reg1418 & mode1213=2 { local tmp:4 = reg1418 + offset0011; export *[ram]:12 tmp; }
efa12: (reg1418) is reg1418 & mode1213=1 & mode1011=0 & op0506=0 { local tmp:4 = reg1418; export *[ram]:12 tmp; }
efa12: reloc (ip) is ip & mode1213=1 & mode1011=1 & op0506=0 ; disp0031 [ reloc = disp0031 + 8; ] { local tmp:4 = reloc + inst_start; export *[ram]:12 tmp; }
efa12: (reg1418) [reg0004 * scale] is scale & reg0004 & reg1418  & mode1213=1 & mode1011=3 & op0506=0 { local tmp:4 = (scale * reg0004) + reg1418; export *[ram]:12 tmp; }
efa12: disp0031 is mode1213=3 & mode1011=0 & op0506=0 ; disp0031 { local tmp:4 = disp0031; export *[ram]:12 tmp; }
efa12: disp0031 (reg1418) is reg1418 & mode1213=3 & mode1011=1 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418; export *[ram]:12 tmp; }
efa12: disp0031 [reg0004 * scale] is reg0004 & scale & mode1213=3 & mode1011=2 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + (reg0004 * scale); export *[ram]:12 tmp; }
efa12: disp0031 (reg1418) [reg0004 * scale] is reg1418 & reg0004 & scale & mode1213=3 & mode1011=3 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418 + (reg0004 * scale); export *[ram]:12 tmp; }


efa16: offset0011 is offset0011 & mode1213=0 { export *[ram]:16 offset0011; }
efa16: offset0011 (reg1418) is offset0011 & reg1418 & mode1213=2 { local tmp:4 = reg1418 + offset0011; export *[ram]:16 tmp; }
efa16: (reg1418) is reg1418 & mode1213=1 & mode1011=0 & op0506=0 { local tmp:4 = reg1418; export *[ram]:16 tmp; }
efa16: reloc (ip) is ip & mode1213=1 & mode1011=1 & op0506=0 ; disp0031 [ reloc = disp0031 + 8; ] { local tmp:4 = reloc + inst_start; export *[ram]:16 tmp; }
efa16: (reg1418) [reg0004 * scale] is scale & reg0004 & reg1418  & mode1213=1 & mode1011=3 & op0506=0 { local tmp:4 = (scale * reg0004) + reg1418; export *[ram]:16 tmp; }
efa16: disp0031 is mode1213=3 & mode1011=0 & op0506=0 ; disp0031 { local tmp:4 = disp0031; export *[ram]:16 tmp; }
efa16: disp0031 (reg1418) is reg1418 & mode1213=3 & mode1011=1 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418; export *[ram]:16 tmp; }
efa16: disp0031 [reg0004 * scale] is reg0004 & scale & mode1213=3 & mode1011=2 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + (reg0004 * scale); export *[ram]:16 tmp; }
efa16: disp0031 (reg1418) [reg0004 * scale] is reg1418 & reg0004 & scale & mode1213=3 & mode1011=3 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418 + (reg0004 * scale); export *[ram]:16 tmp; }


efa2: offset0011 is offset0011 & mode1213=0 { export *[ram]:2 offset0011; }
efa2: offset0011 (reg1418) is offset0011 & reg1418 & mode1213=2 { local tmp:4 = reg1418 + offset0011; export *[ram]:2 tmp; }
efa2: (reg1418) is reg1418 & mode1213=1 & mode1011=0 & op0506=0 { local tmp:4 = reg1418; export *[ram]:2 tmp; }
efa2: reloc (ip) is ip & mode1213=1 & mode1011=1 & op0506=0 ; disp0031 [ reloc = disp0031 + 8; ] { local tmp:4 = reloc + inst_start; export *[ram]:2 tmp; }
efa2: (reg1418) [reg0004 * scale] is scale & reg0004 & reg1418  & mode1213=1 & mode1011=3 & op0506=0 { local tmp:4 = (scale * reg0004) + reg1418; export *[ram]:2 tmp; }
efa2: disp0031 is mode1213=3 & mode1011=0 & op0506=0 ; disp0031 { local tmp:4 = disp0031; export *[ram]:2 tmp; }
efa2: disp0031 (reg1418) is reg1418 & mode1213=3 & mode1011=1 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418; export *[ram]:2 tmp; }
efa2: disp0031 [reg0004 * scale] is reg0004 & scale & mode1213=3 & mode1011=2 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + (reg0004 * scale); export *[ram]:2 tmp; }
efa2: disp0031 (reg1418) [reg0004 * scale] is reg1418 & reg0004 & scale & mode1213=3 & mode1011=3 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418 + (reg0004 * scale); export *[ram]:2 tmp; }


efa4: offset0011 is offset0011 & mode1213=0 { export *[ram]:4 offset0011; }
efa4: offset0011 (reg1418) is offset0011 & reg1418 & mode1213=2 { local tmp:4 = reg1418 + offset0011; export *[ram]:4 tmp; }
efa4: (reg1418) is reg1418 & mode1213=1 & mode1011=0 & op0506=0 { local tmp:4 = reg1418; export *[ram]:4 tmp; }
efa4: reloc (ip) is ip & mode1213=1 & mode1011=1 & op0506=0 ; disp0031 [ reloc = disp0031 + 8; ] { local tmp:4 = reloc + inst_start; export *[ram]:4 tmp; }
efa4: (reg1418) [reg0004 * scale] is scale & reg0004 & reg1418  & mode1213=1 & mode1011=3 & op0506=0 { local tmp:4 = (scale * reg0004) + reg1418; export *[ram]:4 tmp; }
efa4: disp0031 is mode1213=3 & mode1011=0 & op0506=0 ; disp0031 { local tmp:4 = disp0031; export *[ram]:4 tmp; }
efa4: disp0031 (reg1418) is reg1418 & mode1213=3 & mode1011=1 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418; export *[ram]:4 tmp; }
efa4: disp0031 [reg0004 * scale] is reg0004 & scale & mode1213=3 & mode1011=2 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + (reg0004 * scale); export *[ram]:4 tmp; }
efa4: disp0031 (reg1418) [reg0004 * scale] is reg1418 & reg0004 & scale & mode1213=3 & mode1011=3 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418 + (reg0004 * scale); export *[ram]:4 tmp; }


efa8: offset0011 is offset0011 & mode1213=0 { export *[ram]:8 offset0011; }
efa8: offset0011 (reg1418) is offset0011 & reg1418 & mode1213=2 { local tmp:4 = reg1418 + offset0011; export *[ram]:8 tmp; }
efa8: (reg1418) is reg1418 & mode1213=1 & mode1011=0 & op0506=0 { local tmp:4 = reg1418; export *[ram]:8 tmp; }
efa8: reloc (ip) is ip & mode1213=1 & mode1011=1 & op0506=0 ; disp0031 [ reloc = disp0031 + 8; ] { local tmp:4 = reloc + inst_start; export *[ram]:8 tmp; }
efa8: (reg1418) [reg0004 * scale] is scale & reg0004 & reg1418  & mode1213=1 & mode1011=3 & op0506=0 { local tmp:4 = (scale * reg0004) + reg1418; export *[ram]:8 tmp; }
efa8: disp0031 is mode1213=3 & mode1011=0 & op0506=0 ; disp0031 { local tmp:4 = disp0031; export *[ram]:8 tmp; }
efa8: disp0031 (reg1418) is reg1418 & mode1213=3 & mode1011=1 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418; export *[ram]:8 tmp; }
efa8: disp0031 [reg0004 * scale] is reg0004 & scale & mode1213=3 & mode1011=2 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + (reg0004 * scale); export *[ram]:8 tmp; }
efa8: disp0031 (reg1418) [reg0004 * scale] is reg1418 & reg0004 & scale & mode1213=3 & mode1011=3 & op0506=0 ; disp0031 { local tmp:4 = disp0031 + reg1418 + (reg0004 * scale); export *[ram]:8 tmp; }











oper101_0000: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }


oper103_0100: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper103_0100: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper113_0001: reg1418 is reg1418 & m1=0 & s1=0 { export reg1418; }
oper113_0001: sfr1418 is sfr1418 & m1=0 & s1=1 { export sfr1418; }


oper301_0000: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }


oper301_0101: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper301_0101: sfr0004 is sfr0004 & m0=0 & s0=1 { export sfr0004; }
oper301_0101: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper301_0110: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper301_0110: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper301_1001: reg0004l is reg0004l & m0=0 & s0=0 { export reg0004l; }
oper301_1001: sfr0004l is sfr0004l & m0=0 & s0=1 { export sfr0004l; }


oper301_1111: reg0004l is reg0004l & m0=0 & s0=0 { export reg0004l; }
oper301_1111: sfr0004l is sfr0004l & m0=0 & s0=1 { export sfr0004l; }
oper301_1111: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper302_0000: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }


oper302_0100: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper302_0100: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper302_0101: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper302_0101: sfr0004 is sfr0004 & m0=0 & s0=1 { export sfr0004; }
oper302_0101: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper302_0110: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper302_0110: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper302_1101: reg0004l is reg0004l & m0=0 & s0=0 { export reg0004l; }
oper302_1101: sfr0004l is sfr0004l & m0=0 & s0=1 { export sfr0004l; }
oper302_1101: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper302_1111: reg0004l is reg0004l & m0=0 & s0=0 { export reg0004l; }
oper302_1111: sfr0004l is sfr0004l & m0=0 & s0=1 { export sfr0004l; }
oper302_1111: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper302_3101: reg0004tq is reg0004tq & m0=0 & s0=0 { export reg0004tq; }
oper302_3101: sfr0004tq is sfr0004tq & m0=0 & s0=1 { export sfr0004tq; }
oper302_3101: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper302_3111: reg0004tq is reg0004tq & m0=0 & s0=0 { export reg0004tq; }
oper302_3111: sfr0004tq is sfr0004tq & m0=0 & s0=1 { export sfr0004tq; }
oper302_3111: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper303_0000: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }


oper303_0001: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper303_0001: sfr0004 is sfr0004 & m0=0 & s0=1 { export sfr0004; }


oper303_0100: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper303_0100: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper303_0101: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper303_0101: sfr0004 is sfr0004 & m0=0 & s0=1 { export sfr0004; }
oper303_0101: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper303_0110: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }
oper303_0110: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper303_1111: reg0004l is reg0004l & m0=0 & s0=0 { export reg0004l; }
oper303_1111: sfr0004l is sfr0004l & m0=0 & s0=1 { export sfr0004l; }
oper303_1111: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper303_3111: reg0004tq is reg0004tq & m0=0 & s0=0 { export reg0004tq; }
oper303_3111: sfr0004tq is sfr0004tq & m0=0 & s0=1 { export sfr0004tq; }
oper303_3111: op0004 is op0004 & m0=1 & s0=0 { export op0004; }


oper312_0000: reg1923 is reg1923 & m2=0 { export reg1923; }


oper312_0001: reg1923 is reg1923 & m2=0 { export reg1923; }
oper312_0001: sfr1923 is sfr1923 & m2=1 { export sfr1923; }


oper312_0010: reg1923 is reg1923 & m2=0 { export reg1923; }


oper312_0101: reg1418 is reg1418 & m1=0 & s1=0 { export reg1418; }
oper312_0101: sfr1418 is sfr1418 & m1=0 & s1=1 { export sfr1418; }
oper312_0101: op1418 is op1418 & m1=1 & s1=0 { export op1418; }


oper312_0110: reg1418 is reg1418 & m1=0 & s1=0 { export reg1418; }
oper312_0110: op1418 is op1418 & m1=1 & s1=0 { export op1418; }


oper312_1001: reg1923l is reg1923l & m2=0 { export reg1923l; }
oper312_1001: sfr1923l is sfr1923l & m2=1 { export sfr1923l; }


oper312_1011: reg1923l is reg1923l & m2=0 { export reg1923l; }
oper312_1011: sfr1923l is sfr1923l & m2=1 { export sfr1923l; }


oper312_1111: reg1418l is reg1418l & m1=0 & s1=0 { export reg1418l; }
oper312_1111: sfr1418l is sfr1418l & m1=0 & s1=1 { export sfr1418l; }
oper312_1111: op1418 is op1418 & m1=1 & s1=0 { export op1418; }


oper312_3001: reg1923tq is reg1923tq & m2=0 { export reg1923tq; }
oper312_3001: sfr1923tq is sfr1923tq & m2=1 { export sfr1923tq; }


oper312_3011: reg1923tq is reg1923tq & m2=0 { export reg1923tq; }
oper312_3011: sfr1923tq is sfr1923tq & m2=1 { export sfr1923tq; }


oper313_0000: reg1418 is reg1418 & m1=0 & s1=0 { export reg1418; }


oper313_0100: reg1418 is reg1418 & m1=0 & s1=0 { export reg1418; }
oper313_0100: op1418 is op1418 & m1=1 & s1=0 { export op1418; }


oper313_0101: reg1418 is reg1418 & m1=0 & s1=0 { export reg1418; }
oper313_0101: sfr1418 is sfr1418 & m1=0 & s1=1 { export sfr1418; }
oper313_0101: op1418 is op1418 & m1=1 & s1=0 { export op1418; }


oper313_0110: reg1418 is reg1418 & m1=0 & s1=0 { export reg1418; }
oper313_0110: op1418 is op1418 & m1=1 & s1=0 { export op1418; }


oper313_1101: reg1418l is reg1418l & m1=0 & s1=0 { export reg1418l; }
oper313_1101: sfr1418l is sfr1418l & m1=0 & s1=1 { export sfr1418l; }
oper313_1101: op1418 is op1418 & m1=1 & s1=0 { export op1418; }


oper313_1111: reg1418l is reg1418l & m1=0 & s1=0 { export reg1418l; }
oper313_1111: sfr1418l is sfr1418l & m1=0 & s1=1 { export sfr1418l; }
oper313_1111: op1418 is op1418 & m1=1 & s1=0 { export op1418; }


oper313_3111: reg1418tq is reg1418tq & m1=0 & s1=0 { export reg1418tq; }
oper313_3111: sfr1418tq is sfr1418tq & m1=0 & s1=1 { export sfr1418tq; }
oper313_3111: op1418 is op1418 & m1=1 & s1=0 { export op1418; }


oper323_0000: reg1923 is reg1923 & m2=0 { export reg1923; }


oper323_0001: reg1923 is reg1923 & m2=0 { export reg1923; }
oper323_0001: sfr1923 is sfr1923 & m2=1 { export sfr1923; }


oper323_0010: reg1923 is reg1923 & m2=0 { export reg1923; }


oper323_0100: reg1923 is reg1923 & m2=0 { export reg1923; }
oper323_0100: op1923 is op1923 & m2=1 { export op1923; }


oper323_1001: reg1923l is reg1923l & m2=0 { export reg1923l; }
oper323_1001: sfr1923l is sfr1923l & m2=1 { export sfr1923l; }


oper323_1011: reg1923l is reg1923l & m2=0 { export reg1923l; }
oper323_1011: sfr1923l is sfr1923l & m2=1 { export sfr1923l; }


oper323_3011: reg1923tq is reg1923tq & m2=0 { export reg1923tq; }
oper323_3011: sfr1923tq is sfr1923tq & m2=1 { export sfr1923tq; }


oper402_0000: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }


oper412_0000: reg1923 is reg1923 & m2=0 { export reg1923; }


oper502_0000: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }


oper512_0000: reg1923 is reg1923 & m2=0 { export reg1923; }


oper602_0000: reg0004 is reg0004 & m0=0 & s0=0 { export reg0004; }


oper612_0000: reg1923 is reg1923 & m2=0 { export reg1923; }


oper702_1001: reg0004l is reg0004l & m0=0 & s0=0 { export reg0004l; }
oper702_1001: sfr0004l is sfr0004l & m0=0 & s0=1 { export sfr0004l; }


oper712_1001: reg1923l is reg1923l & m2=0 { export reg1923l; }
oper712_1001: sfr1923l is sfr1923l & m2=1 { export sfr1923l; }


oper802_3001: reg0004tq is reg0004tq & m0=0 & s0=0 { export reg0004tq; }
oper802_3001: sfr0004tq is sfr0004tq & m0=0 & s0=1 { export sfr0004tq; }


oper812_3001: reg1923tq is reg1923tq & m2=0 { export reg1923tq; }
oper812_3001: sfr1923tq is sfr1923tq & m2=1 { export sfr1923tq; }


oper902_3001: reg0004tq is reg0004tq & m0=0 & s0=0 { export reg0004tq; }
oper902_3001: sfr0004tq is sfr0004tq & m0=0 & s0=1 { export sfr0004tq; }


oper912_3001: reg1923tq is reg1923tq & m2=0 { export reg1923tq; }
oper912_3001: sfr1923tq is sfr1923tq & m2=1 { export sfr1923tq; }


# addc
:addc oper303_0101, oper313_0101, oper323_0001 is op2431=0x5b & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addi
:addi oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addie
:addie oper303_0101, oper313_0101, oper323_0001 is op2431=0x7a & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addig
:addig oper303_0101, oper313_0101, oper323_0001 is op2431=0x79 & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addige
:addige oper303_0101, oper313_0101, oper323_0001 is op2431=0x7b & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addil
:addil oper303_0101, oper313_0101, oper323_0001 is op2431=0x7c & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addile
:addile oper303_0101, oper313_0101, oper323_0001 is op2431=0x7e & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addine
:addine oper303_0101, oper313_0101, oper323_0001 is op2431=0x7d & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addino
:addino oper303_0101, oper313_0101, oper323_0001 is op2431=0x78 & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addio
:addio oper303_0101, oper313_0101, oper323_0001 is op2431=0x7f & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addo
:addo oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addoe
:addoe oper303_0101, oper313_0101, oper323_0001 is op2431=0x7a & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addog
:addog oper303_0101, oper313_0101, oper323_0001 is op2431=0x79 & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addoge
:addoge oper303_0101, oper313_0101, oper323_0001 is op2431=0x7b & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addol
:addol oper303_0101, oper313_0101, oper323_0001 is op2431=0x7c & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addole
:addole oper303_0101, oper313_0101, oper323_0001 is op2431=0x7e & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addone
:addone oper303_0101, oper313_0101, oper323_0001 is op2431=0x7d & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addono
:addono oper303_0101, oper313_0101, oper323_0001 is op2431=0x78 & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addoo
:addoo oper303_0101, oper313_0101, oper323_0001 is op2431=0x7f & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# addr
:addr oper303_0110, oper313_0110, oper323_0010 is op2431=0x78 & op0710=0xf & oper303_0110 & oper313_0110 & oper323_0010 unimpl


# addrl
:addrl oper303_1111, oper313_1111, oper323_1011 is op2431=0x79 & op0710=0xf & oper303_1111 & oper313_1111 & oper323_1011 unimpl


# alterbit
:alterbit oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0xf & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# and
:and oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# andnot
:andnot oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# atadd
:atadd oper303_0001, oper313_0101, oper323_0001 is op2431=0x61 & op0710=0x2 & oper303_0001 & oper313_0101 & oper323_0001 unimpl


# atanr
:atanr oper303_0110, oper313_0110, oper323_0010 is op2431=0x68 & op0710=0x0 & oper303_0110 & oper313_0110 & oper323_0010 unimpl


# atanrl
:atanrl oper303_1111, oper313_1111, oper323_1011 is op2431=0x69 & op0710=0x0 & oper303_1111 & oper313_1111 & oper323_1011 unimpl


# atmod
:atmod oper303_0001, oper313_0101, oper323_0000 is op2431=0x61 & op0710=0x0 & oper303_0001 & oper313_0101 & oper323_0000 unimpl


# b
:b disp0223 is op2431=0x8 & op0000=0x0 & disp0223 unimpl


# bal
:bal disp0223 is op2431=0xb & op0000=0x0 & disp0223 unimpl


# balx
:balx efa1, oper412_0000 is ( op2431=0x85 & op0710=0x0 & oper412_0000 ) ... & efa1 unimpl


# bbc
:bbc oper103_0100, oper113_0001, disp0212 is op2431=0x30 & oper103_0100 & oper113_0001 & disp0212 unimpl


# bbs
:bbs oper103_0100, oper113_0001, disp0212 is op2431=0x37 & oper103_0100 & oper113_0001 & disp0212 unimpl


# be
:be disp0223 is op2431=0x12 & op0000=0x0 & disp0223 unimpl


# bg
:bg disp0223 is op2431=0x11 & op0000=0x0 & disp0223 unimpl


# bge
:bge disp0223 is op2431=0x13 & op0000=0x0 & disp0223 unimpl


# bl
:bl disp0223 is op2431=0x14 & op0000=0x0 & disp0223 unimpl


# ble
:ble disp0223 is op2431=0x16 & op0000=0x0 & disp0223 unimpl


# bne
:bne disp0223 is op2431=0x15 & op0000=0x0 & disp0223 unimpl


# bno
:bno disp0223 is op2431=0x10 & op0000=0x0 & disp0223 unimpl


# bo
:bo disp0223 is op2431=0x17 & op0000=0x0 & disp0223 unimpl


# bswap
:bswap oper302_0101, oper312_0001 is op2431=0x5a & op0710=0xd & oper302_0101 & oper312_0001 unimpl


# bx
:bx efa1 is ( op2431=0x84 & op0710=0x0 ) ... & efa1 unimpl


# call
:call disp0223 is op2431=0x9 & op0000=0x0 & disp0223 unimpl


# calls
:calls oper301_0101 is op2431=0x66 & op0710=0x0 & oper301_0101 unimpl


# callx
:callx efa1 is ( op2431=0x86 & op0710=0x0 ) ... & efa1 unimpl


# chkbit
:chkbit oper302_0101, oper312_0101 is op2431=0x5a & op0710=0xe & oper302_0101 & oper312_0101 unimpl


# classr
:classr oper301_0110 is op2431=0x68 & op0710=0xf & oper301_0110 unimpl


# classrl
:classrl oper301_1111 is op2431=0x69 & op0710=0xf & oper301_1111 unimpl


# clrbit
:clrbit oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0xc & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# cmpdeci
:cmpdeci oper303_0101, oper313_0101, oper323_0001 is op2431=0x5a & op0710=0x7 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# cmpdeco
:cmpdeco oper303_0101, oper313_0101, oper323_0001 is op2431=0x5a & op0710=0x6 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# cmpi
:cmpi oper302_0101, oper312_0101 is op2431=0x5a & op0710=0x1 & oper302_0101 & oper312_0101 unimpl


# cmpib
:cmpib oper302_0101, oper312_0101 is op2431=0x59 & op0710=0x5 & oper302_0101 & oper312_0101 unimpl


# cmpibe
:cmpibe oper103_0100, oper113_0001, disp0212 is op2431=0x3a & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpibg
:cmpibg oper103_0100, oper113_0001, disp0212 is op2431=0x39 & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpibge
:cmpibge oper103_0100, oper113_0001, disp0212 is op2431=0x3b & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpibl
:cmpibl oper103_0100, oper113_0001, disp0212 is op2431=0x3c & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpible
:cmpible oper103_0100, oper113_0001, disp0212 is op2431=0x3e & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpibne
:cmpibne oper103_0100, oper113_0001, disp0212 is op2431=0x3d & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpibno
:cmpibno oper103_0100, oper113_0001, disp0212 is op2431=0x38 & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpibo
:cmpibo oper103_0100, oper113_0001, disp0212 is op2431=0x3f & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpinci
:cmpinci oper303_0101, oper313_0101, oper323_0001 is op2431=0x5a & op0710=0x5 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# cmpinco
:cmpinco oper303_0101, oper313_0101, oper323_0001 is op2431=0x5a & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# cmpis
:cmpis oper302_0101, oper312_0101 is op2431=0x59 & op0710=0x7 & oper302_0101 & oper312_0101 unimpl


# cmpo
:cmpo oper302_0101, oper312_0101 is op2431=0x5a & op0710=0x0 & oper302_0101 & oper312_0101 unimpl


# cmpob
:cmpob oper302_0101, oper312_0101 is op2431=0x59 & op0710=0x4 & oper302_0101 & oper312_0101 unimpl


# cmpobe
:cmpobe oper103_0100, oper113_0001, disp0212 is op2431=0x32 & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpobg
:cmpobg oper103_0100, oper113_0001, disp0212 is op2431=0x31 & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpobge
:cmpobge oper103_0100, oper113_0001, disp0212 is op2431=0x33 & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpobl
:cmpobl oper103_0100, oper113_0001, disp0212 is op2431=0x34 & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpoble
:cmpoble oper103_0100, oper113_0001, disp0212 is op2431=0x36 & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpobne
:cmpobne oper103_0100, oper113_0001, disp0212 is op2431=0x35 & oper103_0100 & oper113_0001 & disp0212 unimpl


# cmpor
:cmpor oper302_0110, oper312_0110 is op2431=0x68 & op0710=0x4 & oper302_0110 & oper312_0110 unimpl


# cmporl
:cmporl oper302_1111, oper312_1111 is op2431=0x69 & op0710=0x4 & oper302_1111 & oper312_1111 unimpl


# cmpos
:cmpos oper302_0101, oper312_0101 is op2431=0x59 & op0710=0x6 & oper302_0101 & oper312_0101 unimpl


# cmpr
:cmpr oper302_0110, oper312_0110 is op2431=0x68 & op0710=0x5 & oper302_0110 & oper312_0110 unimpl


# cmprl
:cmprl oper302_1111, oper312_1111 is op2431=0x69 & op0710=0x5 & oper302_1111 & oper312_1111 unimpl


# cmpstr
:cmpstr oper303_0000, oper313_0000, oper323_0100 is op2431=0x60 & op0710=0x3 & oper303_0000 & oper313_0000 & oper323_0100 unimpl


# concmpi
:concmpi oper302_0101, oper312_0101 is op2431=0x5a & op0710=0x3 & oper302_0101 & oper312_0101 unimpl


# concmpo
:concmpo oper302_0101, oper312_0101 is op2431=0x5a & op0710=0x2 & oper302_0101 & oper312_0101 unimpl


# condrec
:condrec oper302_0000, oper312_0000 is op2431=0x64 & op0710=0x6 & oper302_0000 & oper312_0000 unimpl


# condwait
:condwait oper301_0000 is op2431=0x66 & op0710=0x8 & oper301_0000 unimpl


# cosr
:cosr oper302_0110, oper312_0010 is op2431=0x68 & op0710=0xd & oper302_0110 & oper312_0010 unimpl


# cosrl
:cosrl oper302_1111, oper312_1011 is op2431=0x69 & op0710=0xd & oper302_1111 & oper312_1011 unimpl


# cpyrsre
:cpyrsre oper303_3111, oper313_3111, oper323_3011 is op2431=0x6e & op0710=0x3 & oper303_3111 & oper313_3111 & oper323_3011 unimpl


# cpysre
:cpysre oper303_3111, oper313_3111, oper323_3011 is op2431=0x6e & op0710=0x2 & oper303_3111 & oper313_3111 & oper323_3011 unimpl


# cvtadr
:cvtadr oper302_0100, oper312_1001 is op2431=0x67 & op0710=0x2 & oper302_0100 & oper312_1001 unimpl


# cvtilr
:cvtilr oper302_0100, oper312_0010 is op2431=0x67 & op0710=0x5 & oper302_0100 & oper312_0010 unimpl


# cvtir
:cvtir oper302_0100, oper312_0010 is op2431=0x67 & op0710=0x4 & oper302_0100 & oper312_0010 unimpl


# cvtri
:cvtri oper302_0110, oper312_0000 is op2431=0x6c & op0710=0x0 & oper302_0110 & oper312_0000 unimpl


# cvtril
:cvtril oper302_0110, oper312_1001 is op2431=0x6c & op0710=0x1 & oper302_0110 & oper312_1001 unimpl


# cvtzri
:cvtzri oper302_0110, oper312_0000 is op2431=0x6c & op0710=0x2 & oper302_0110 & oper312_0000 unimpl


# cvtzril
:cvtzril oper302_0110, oper312_1001 is op2431=0x6c & op0710=0x3 & oper302_0110 & oper312_1001 unimpl


# daddc
:daddc oper303_0101, oper313_0101, oper323_0001 is op2431=0x64 & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# dcctl
:dcctl oper303_0101, oper313_0101, oper323_0100 is op2431=0x65 & op0710=0xc & oper303_0101 & oper313_0101 & oper323_0100 unimpl


# dcinva
:dcinva efa1 is ( op2431=0xac & op0710=0x0 ) ... & efa1 unimpl


# divi
:divi oper303_0101, oper313_0101, oper323_0001 is op2431=0x74 & op0710=0xb & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# divo
:divo oper303_0101, oper313_0101, oper323_0001 is op2431=0x70 & op0710=0xb & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# divr
:divr oper303_0110, oper313_0110, oper323_0010 is op2431=0x78 & op0710=0xb & oper303_0110 & oper313_0110 & oper323_0010 unimpl


# divrl
:divrl oper303_1111, oper313_1111, oper323_1011 is op2431=0x79 & op0710=0xb & oper303_1111 & oper313_1111 & oper323_1011 unimpl


# dmovt
:dmovt oper302_0101, oper312_0001 is op2431=0x64 & op0710=0x4 & oper302_0101 & oper312_0001 unimpl


# dsubc
:dsubc oper303_0101, oper313_0101, oper323_0001 is op2431=0x64 & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# ediv
:ediv oper303_0101, oper313_1101, oper323_0001 is op2431=0x67 & op0710=0x1 & oper303_0101 & oper313_1101 & oper323_0001 unimpl


# emul
:emul oper303_0101, oper313_0101, oper323_1001 is op2431=0x67 & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_1001 unimpl


# eshro
:eshro oper303_0101, oper313_0101, oper323_0001 is op2431=0x5d & op0710=0x8 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# expr
:expr oper302_0110, oper312_0010 is op2431=0x68 & op0710=0x9 & oper302_0110 & oper312_0010 unimpl


# exprl
:exprl oper302_1111, oper312_1011 is op2431=0x69 & op0710=0x9 & oper302_1111 & oper312_1011 unimpl


# extract
:extract oper303_0101, oper313_0101, oper323_0000 is op2431=0x65 & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0000 unimpl


# faulte
:faulte  is op2431=0x1a & op0000=0x0 unimpl


# faultg
:faultg  is op2431=0x19 & op0000=0x0 unimpl


# faultge
:faultge  is op2431=0x1b & op0000=0x0 unimpl


# faultl
:faultl  is op2431=0x1c & op0000=0x0 unimpl


# faultle
:faultle  is op2431=0x1e & op0000=0x0 unimpl


# faultne
:faultne  is op2431=0x1d & op0000=0x0 unimpl


# faultno
:faultno  is op2431=0x18 & op0000=0x0 unimpl


# faulto
:faulto  is op2431=0x1f & op0000=0x0 unimpl


# fill
:fill oper303_0000, oper313_0100, oper323_0100 is op2431=0x61 & op0710=0x7 & oper303_0000 & oper313_0100 & oper323_0100 unimpl


# flushreg
:flushreg  is op2431=0x66 & op0710=0xd unimpl


# fmark
:fmark  is op2431=0x66 & op0710=0xc unimpl


# halt
:halt oper301_0101 is op2431=0x65 & op0710=0xd & oper301_0101 unimpl


# icctl
:icctl oper303_0101, oper313_0101, oper323_0001 is op2431=0x65 & op0710=0xb & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# inspacc
:inspacc oper302_0000, oper312_0000 is op2431=0x61 & op0710=0x3 & oper302_0000 & oper312_0000 unimpl


# intctl
:intctl oper302_0101, oper312_0001 is op2431=0x65 & op0710=0x8 & oper302_0101 & oper312_0001 unimpl


# intdis
:intdis  is op2431=0x5b & op0710=0x4 unimpl


# inten
:inten  is op2431=0x5b & op0710=0x5 unimpl


# ld
:ld efa4, oper612_0000 is ( op2431=0x90 & op0710=0x0 & oper612_0000 ) ... & efa4 unimpl


# lda
:lda efa1, oper412_0000 is ( op2431=0x8c & op0710=0x0 & oper412_0000 ) ... & efa1 unimpl


# ldib
:ldib efa1, oper412_0000 is ( op2431=0xc0 & op0710=0x0 & oper412_0000 ) ... & efa1 unimpl


# ldis
:ldis efa2, oper512_0000 is ( op2431=0xc8 & op0710=0x0 & oper512_0000 ) ... & efa2 unimpl


# ldl
:ldl efa8, oper712_1001 is ( op2431=0x98 & op0710=0x0 & oper712_1001 ) ... & efa8 unimpl


# ldob
:ldob efa1, oper412_0000 is ( op2431=0x80 & op0710=0x0 & oper412_0000 ) ... & efa1 unimpl


# ldos
:ldos efa2, oper512_0000 is ( op2431=0x88 & op0710=0x0 & oper512_0000 ) ... & efa2 unimpl


# ldphy
:ldphy oper302_0000, oper312_0000 is op2431=0x61 & op0710=0x4 & oper302_0000 & oper312_0000 unimpl


# ldq
:ldq efa16, oper912_3001 is ( op2431=0xb0 & op0710=0x0 & oper912_3001 ) ... & efa16 unimpl


# ldt
:ldt efa12, oper812_3001 is ( op2431=0xa0 & op0710=0x0 & oper812_3001 ) ... & efa12 unimpl


# ldtime
:ldtime oper301_1001 is op2431=0x67 & op0710=0x3 & oper301_1001 unimpl


# logbnr
:logbnr oper302_0110, oper312_0010 is op2431=0x68 & op0710=0xa & oper302_0110 & oper312_0010 unimpl


# logbnrl
:logbnrl oper302_1111, oper312_1011 is op2431=0x69 & op0710=0xa & oper302_1111 & oper312_1011 unimpl


# logepr
:logepr oper303_0110, oper313_0110, oper323_0010 is op2431=0x68 & op0710=0x1 & oper303_0110 & oper313_0110 & oper323_0010 unimpl


# logeprl
:logeprl oper303_1111, oper313_1111, oper323_1011 is op2431=0x69 & op0710=0x1 & oper303_1111 & oper313_1111 & oper323_1011 unimpl


# logr
:logr oper303_0110, oper313_0110, oper323_0010 is op2431=0x68 & op0710=0x2 & oper303_0110 & oper313_0110 & oper323_0010 unimpl


# logrl
:logrl oper303_1111, oper313_1111, oper323_1011 is op2431=0x69 & op0710=0x2 & oper303_1111 & oper313_1111 & oper323_1011 unimpl


# mark
:mark  is op2431=0x66 & op0710=0xb unimpl


# modac
:modac oper303_0101, oper313_0101, oper323_0001 is op2431=0x64 & op0710=0x5 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# modi
:modi oper303_0101, oper313_0101, oper323_0001 is op2431=0x74 & op0710=0x9 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# modify
:modify oper303_0101, oper313_0101, oper323_0000 is op2431=0x65 & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0000 unimpl


# modpc
:modpc oper303_0101, oper313_0101, oper323_0000 is op2431=0x65 & op0710=0x5 & oper303_0101 & oper313_0101 & oper323_0000 unimpl


# modtc
:modtc oper303_0101, oper313_0101, oper323_0001 is op2431=0x65 & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# mov
:mov oper302_0101, oper312_0001 is op2431=0x5c & op0710=0xc & oper302_0101 & oper312_0001 unimpl


# movl
:movl oper302_1101, oper312_1001 is op2431=0x5d & op0710=0xc & oper302_1101 & oper312_1001 unimpl


# movq
:movq oper302_3101, oper312_3001 is op2431=0x5f & op0710=0xc & oper302_3101 & oper312_3001 unimpl


# movqstr
:movqstr oper303_0000, oper313_0000, oper323_0100 is op2431=0x60 & op0710=0x4 & oper303_0000 & oper313_0000 & oper323_0100 unimpl


# movr
:movr oper302_0110, oper312_0010 is op2431=0x6c & op0710=0x9 & oper302_0110 & oper312_0010 unimpl


# movre
:movre oper302_3111, oper312_3011 is op2431=0x6e & op0710=0x1 & oper302_3111 & oper312_3011 unimpl


# movrl
:movrl oper302_1111, oper312_1011 is op2431=0x6d & op0710=0x9 & oper302_1111 & oper312_1011 unimpl


# movstr
:movstr oper303_0000, oper313_0000, oper323_0100 is op2431=0x60 & op0710=0x5 & oper303_0000 & oper313_0000 & oper323_0100 unimpl


# movt
:movt oper302_3101, oper312_3001 is op2431=0x5e & op0710=0xc & oper302_3101 & oper312_3001 unimpl


# muli
:muli oper303_0101, oper313_0101, oper323_0001 is op2431=0x74 & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# mulo
:mulo oper303_0101, oper313_0101, oper323_0001 is op2431=0x70 & op0710=0x1 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# mulr
:mulr oper303_0110, oper313_0110, oper323_0010 is op2431=0x78 & op0710=0xc & oper303_0110 & oper313_0110 & oper323_0010 unimpl


# mulrl
:mulrl oper303_1111, oper313_1111, oper323_1011 is op2431=0x79 & op0710=0xc & oper303_1111 & oper313_1111 & oper323_1011 unimpl


# nand
:nand oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0xe & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# nor
:nor oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0x8 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# not
:not oper302_0101, oper312_0001 is op2431=0x58 & op0710=0xa & oper302_0101 & oper312_0001 unimpl


# notand
:notand oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# notbit
:notbit oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# notor
:notor oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0xd & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# or
:or oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0x7 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# ornot
:ornot oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0xb & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# receive
:receive oper302_0000, oper312_0000 is op2431=0x65 & op0710=0x6 & oper302_0000 & oper312_0000 unimpl


# remi
:remi oper303_0101, oper313_0101, oper323_0001 is op2431=0x74 & op0710=0x8 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# remo
:remo oper303_0101, oper313_0101, oper323_0001 is op2431=0x70 & op0710=0x8 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# remr
:remr oper303_0110, oper313_0110, oper323_0010 is op2431=0x68 & op0710=0x3 & oper303_0110 & oper313_0110 & oper323_0010 unimpl


# remrl
:remrl oper303_1111, oper313_1111, oper323_1011 is op2431=0x69 & op0710=0x3 & oper303_1111 & oper313_1111 & oper323_1011 unimpl


# resumprcs
:resumprcs oper301_0000 is op2431=0x66 & op0710=0x4 & oper301_0000 unimpl


# ret
:ret  is op2431=0xa & op0000=0x0 unimpl


# rotate
:rotate oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0xd & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# roundr
:roundr oper302_0110, oper312_0010 is op2431=0x68 & op0710=0xb & oper302_0110 & oper312_0010 unimpl


# roundrl
:roundrl oper302_1111, oper312_1011 is op2431=0x69 & op0710=0xb & oper302_1111 & oper312_1011 unimpl


# saveprcs
:saveprcs  is op2431=0x66 & op0710=0x6 unimpl


# scaler
:scaler oper303_0100, oper313_0110, oper323_0010 is op2431=0x67 & op0710=0x7 & oper303_0100 & oper313_0110 & oper323_0010 unimpl


# scalerl
:scalerl oper303_0100, oper313_1111, oper323_1011 is op2431=0x67 & op0710=0x6 & oper303_0100 & oper313_1111 & oper323_1011 unimpl


# scanbit
:scanbit oper302_0101, oper312_0001 is op2431=0x64 & op0710=0x1 & oper302_0101 & oper312_0001 unimpl


# scanbyte
:scanbyte oper302_0101, oper312_0101 is op2431=0x5a & op0710=0xc & oper302_0101 & oper312_0101 unimpl


# schedprcs
:schedprcs oper301_0000 is op2431=0x66 & op0710=0x5 & oper301_0000 unimpl


# sdma
:sdma oper303_0101, oper313_0101, oper323_0100 is op2431=0x63 & op0710=0x0 & oper303_0101 & oper313_0101 & oper323_0100 unimpl


# sele
:sele oper303_0101, oper313_0101, oper323_0001 is op2431=0x7a & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# selg
:selg oper303_0101, oper313_0101, oper323_0001 is op2431=0x79 & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# selge
:selge oper303_0101, oper313_0101, oper323_0001 is op2431=0x7b & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# sell
:sell oper303_0101, oper313_0101, oper323_0001 is op2431=0x7c & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# selle
:selle oper303_0101, oper313_0101, oper323_0001 is op2431=0x7e & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# selne
:selne oper303_0101, oper313_0101, oper323_0001 is op2431=0x7d & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# selno
:selno oper303_0101, oper313_0101, oper323_0001 is op2431=0x78 & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# selo
:selo oper303_0101, oper313_0101, oper323_0001 is op2431=0x7f & op0710=0x4 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# send
:send oper303_0000, oper313_0100, oper323_0000 is op2431=0x66 & op0710=0x2 & oper303_0000 & oper313_0100 & oper323_0000 unimpl


# sendserv
:sendserv oper301_0000 is op2431=0x66 & op0710=0x3 & oper301_0000 unimpl


# setbit
:setbit oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# shli
:shli oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0xe & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# shlo
:shlo oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0xc & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# shrdi
:shrdi oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0xa & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# shri
:shri oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0xb & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# shro
:shro oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0x8 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# signal
:signal oper301_0000 is op2431=0x66 & op0710=0xa & oper301_0000 unimpl


# sinr
:sinr oper302_0110, oper312_0010 is op2431=0x68 & op0710=0xc & oper302_0110 & oper312_0010 unimpl


# sinrl
:sinrl oper302_1111, oper312_1011 is op2431=0x69 & op0710=0xc & oper302_1111 & oper312_1011 unimpl


# spanbit
:spanbit oper302_0101, oper312_0001 is op2431=0x64 & op0710=0x0 & oper302_0101 & oper312_0001 unimpl


# sqrtr
:sqrtr oper302_0110, oper312_0010 is op2431=0x68 & op0710=0x8 & oper302_0110 & oper312_0010 unimpl


# sqrtrl
:sqrtrl oper302_1111, oper312_1011 is op2431=0x69 & op0710=0x8 & oper302_1111 & oper312_1011 unimpl


# st
:st oper602_0000, efa4 is ( op2431=0x92 & op0710=0x0 & oper602_0000 ) ... & efa4 unimpl


# stib
:stib oper402_0000, efa1 is ( op2431=0xc2 & op0710=0x0 & oper402_0000 ) ... & efa1 unimpl


# stis
:stis oper502_0000, efa2 is ( op2431=0xca & op0710=0x0 & oper502_0000 ) ... & efa2 unimpl


# stl
:stl oper702_1001, efa8 is ( op2431=0x9a & op0710=0x0 & oper702_1001 ) ... & efa8 unimpl


# stob
:stob oper402_0000, efa1 is ( op2431=0x82 & op0710=0x0 & oper402_0000 ) ... & efa1 unimpl


# stos
:stos oper502_0000, efa2 is ( op2431=0x8a & op0710=0x0 & oper502_0000 ) ... & efa2 unimpl


# stq
:stq oper902_3001, efa16 is ( op2431=0xb2 & op0710=0x0 & oper902_3001 ) ... & efa16 unimpl


# stt
:stt oper802_3001, efa12 is ( op2431=0xa2 & op0710=0x0 & oper802_3001 ) ... & efa12 unimpl


# subc
:subc oper303_0101, oper313_0101, oper323_0001 is op2431=0x5b & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subi
:subi oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subie
:subie oper303_0101, oper313_0101, oper323_0001 is op2431=0x7a & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subig
:subig oper303_0101, oper313_0101, oper323_0001 is op2431=0x79 & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subige
:subige oper303_0101, oper313_0101, oper323_0001 is op2431=0x7b & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subil
:subil oper303_0101, oper313_0101, oper323_0001 is op2431=0x7c & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subile
:subile oper303_0101, oper313_0101, oper323_0001 is op2431=0x7e & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subine
:subine oper303_0101, oper313_0101, oper323_0001 is op2431=0x7d & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subino
:subino oper303_0101, oper313_0101, oper323_0001 is op2431=0x78 & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subio
:subio oper303_0101, oper313_0101, oper323_0001 is op2431=0x7f & op0710=0x3 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subo
:subo oper303_0101, oper313_0101, oper323_0001 is op2431=0x59 & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# suboe
:suboe oper303_0101, oper313_0101, oper323_0001 is op2431=0x7a & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subog
:subog oper303_0101, oper313_0101, oper323_0001 is op2431=0x79 & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# suboge
:suboge oper303_0101, oper313_0101, oper323_0001 is op2431=0x7b & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subol
:subol oper303_0101, oper313_0101, oper323_0001 is op2431=0x7c & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subole
:subole oper303_0101, oper313_0101, oper323_0001 is op2431=0x7e & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subone
:subone oper303_0101, oper313_0101, oper323_0001 is op2431=0x7d & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subono
:subono oper303_0101, oper313_0101, oper323_0001 is op2431=0x78 & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# suboo
:suboo oper303_0101, oper313_0101, oper323_0001 is op2431=0x7f & op0710=0x2 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# subr
:subr oper303_0110, oper313_0110, oper323_0010 is op2431=0x78 & op0710=0xd & oper303_0110 & oper313_0110 & oper323_0010 unimpl


# subrl
:subrl oper303_1111, oper313_1111, oper323_1011 is op2431=0x79 & op0710=0xd & oper303_1111 & oper313_1111 & oper323_1011 unimpl


# syncf
:syncf  is op2431=0x66 & op0710=0xf unimpl


# synld
:synld oper302_0000, oper312_0000 is op2431=0x61 & op0710=0x5 & oper302_0000 & oper312_0000 unimpl


# synmov
:synmov oper302_0000, oper312_0000 is op2431=0x60 & op0710=0x0 & oper302_0000 & oper312_0000 unimpl


# synmovl
:synmovl oper302_0000, oper312_0000 is op2431=0x60 & op0710=0x1 & oper302_0000 & oper312_0000 unimpl


# synmovq
:synmovq oper302_0000, oper312_0000 is op2431=0x60 & op0710=0x2 & oper302_0000 & oper312_0000 unimpl


# syscall
:syscall  is op2431=0x1 & op0000=0x0 unimpl


# sysctl
:sysctl oper303_0101, oper313_0101, oper323_0100 is op2431=0x65 & op0710=0x9 & oper303_0101 & oper313_0101 & oper323_0100 unimpl


# tanr
:tanr oper302_0110, oper312_0010 is op2431=0x68 & op0710=0xe & oper302_0110 & oper312_0010 unimpl


# tanrl
:tanrl oper302_1111, oper312_1011 is op2431=0x69 & op0710=0xe & oper302_1111 & oper312_1011 unimpl


# teste
:teste oper101_0000 is op2431=0x22 & oper101_0000 unimpl


# testg
:testg oper101_0000 is op2431=0x21 & oper101_0000 unimpl


# testge
:testge oper101_0000 is op2431=0x23 & oper101_0000 unimpl


# testl
:testl oper101_0000 is op2431=0x24 & oper101_0000 unimpl


# testle
:testle oper101_0000 is op2431=0x26 & oper101_0000 unimpl


# testne
:testne oper101_0000 is op2431=0x25 & oper101_0000 unimpl


# testno
:testno oper101_0000 is op2431=0x20 & oper101_0000 unimpl


# testo
:testo oper101_0000 is op2431=0x27 & oper101_0000 unimpl


# udma
:udma  is op2431=0x63 & op0710=0x1 unimpl


# wait
:wait oper301_0000 is op2431=0x66 & op0710=0x9 & oper301_0000 unimpl


# xnor
:xnor oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0x9 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


# xor
:xor oper303_0101, oper313_0101, oper323_0001 is op2431=0x58 & op0710=0x6 & oper303_0101 & oper313_0101 & oper323_0001 unimpl


